{"filter":false,"title":"script2.js","tooltip":"/NYC_weather_midterm/script2.js","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":434,"column":14},"end":{"row":435,"column":0},"action":"remove","lines":["",""],"id":392}],[{"start":{"row":451,"column":9},"end":{"row":452,"column":0},"action":"insert","lines":["",""],"id":393},{"start":{"row":452,"column":0},"end":{"row":452,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":473,"column":14},"end":{"row":474,"column":0},"action":"insert","lines":["",""],"id":394},{"start":{"row":474,"column":0},"end":{"row":474,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":474,"column":8},"end":{"row":474,"column":12},"action":"remove","lines":["    "],"id":395}],[{"start":{"row":474,"column":8},"end":{"row":474,"column":9},"action":"insert","lines":["t"],"id":396},{"start":{"row":474,"column":9},"end":{"row":474,"column":10},"action":"insert","lines":["o"]},{"start":{"row":474,"column":10},"end":{"row":474,"column":11},"action":"insert","lines":["o"]},{"start":{"row":474,"column":11},"end":{"row":474,"column":12},"action":"insert","lines":["l"]},{"start":{"row":474,"column":12},"end":{"row":474,"column":13},"action":"insert","lines":["t"]}],[{"start":{"row":474,"column":13},"end":{"row":474,"column":14},"action":"insert","lines":["i"],"id":397},{"start":{"row":474,"column":14},"end":{"row":474,"column":15},"action":"insert","lines":["p"]},{"start":{"row":474,"column":15},"end":{"row":474,"column":16},"action":"insert","lines":["."]},{"start":{"row":474,"column":16},"end":{"row":474,"column":17},"action":"insert","lines":["s"]},{"start":{"row":474,"column":17},"end":{"row":474,"column":18},"action":"insert","lines":["e"]},{"start":{"row":474,"column":18},"end":{"row":474,"column":19},"action":"insert","lines":["l"]}],[{"start":{"row":474,"column":16},"end":{"row":474,"column":19},"action":"remove","lines":["sel"],"id":398},{"start":{"row":474,"column":16},"end":{"row":474,"column":24},"action":"insert","lines":["select()"]}],[{"start":{"row":474,"column":23},"end":{"row":474,"column":25},"action":"insert","lines":["\"\""],"id":399}],[{"start":{"row":474,"column":24},"end":{"row":474,"column":25},"action":"insert","lines":["#"],"id":400},{"start":{"row":474,"column":25},"end":{"row":474,"column":26},"action":"insert","lines":["t"]},{"start":{"row":474,"column":26},"end":{"row":474,"column":27},"action":"insert","lines":["o"]},{"start":{"row":474,"column":27},"end":{"row":474,"column":28},"action":"insert","lines":["o"]},{"start":{"row":474,"column":28},"end":{"row":474,"column":29},"action":"insert","lines":["l"]},{"start":{"row":474,"column":29},"end":{"row":474,"column":30},"action":"insert","lines":["t"]}],[{"start":{"row":474,"column":30},"end":{"row":474,"column":31},"action":"insert","lines":["i"],"id":401},{"start":{"row":474,"column":31},"end":{"row":474,"column":32},"action":"insert","lines":["p"]},{"start":{"row":474,"column":32},"end":{"row":474,"column":33},"action":"insert","lines":["-"]}],[{"start":{"row":474,"column":33},"end":{"row":474,"column":34},"action":"insert","lines":["r"],"id":402},{"start":{"row":474,"column":34},"end":{"row":474,"column":35},"action":"insert","lines":["a"]},{"start":{"row":474,"column":35},"end":{"row":474,"column":36},"action":"insert","lines":["u"]}],[{"start":{"row":474,"column":35},"end":{"row":474,"column":36},"action":"remove","lines":["u"],"id":403}],[{"start":{"row":474,"column":35},"end":{"row":474,"column":36},"action":"insert","lines":["i"],"id":404},{"start":{"row":474,"column":36},"end":{"row":474,"column":37},"action":"insert","lines":["n"]}],[{"start":{"row":474,"column":39},"end":{"row":475,"column":0},"action":"insert","lines":["",""],"id":405},{"start":{"row":475,"column":0},"end":{"row":475,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":475,"column":8},"end":{"row":475,"column":12},"action":"insert","lines":["    "],"id":406}],[{"start":{"row":475,"column":12},"end":{"row":475,"column":13},"action":"insert","lines":["."],"id":407},{"start":{"row":475,"column":13},"end":{"row":475,"column":14},"action":"insert","lines":["s"]},{"start":{"row":475,"column":14},"end":{"row":475,"column":15},"action":"insert","lines":["t"]},{"start":{"row":475,"column":15},"end":{"row":475,"column":16},"action":"insert","lines":["y"]}],[{"start":{"row":475,"column":13},"end":{"row":475,"column":16},"action":"remove","lines":["sty"],"id":408},{"start":{"row":475,"column":13},"end":{"row":475,"column":20},"action":"insert","lines":["style()"]}],[{"start":{"row":475,"column":19},"end":{"row":475,"column":21},"action":"insert","lines":["\"\""],"id":409}],[{"start":{"row":475,"column":20},"end":{"row":475,"column":21},"action":"insert","lines":["f"],"id":410},{"start":{"row":475,"column":21},"end":{"row":475,"column":22},"action":"insert","lines":["i"]},{"start":{"row":475,"column":22},"end":{"row":475,"column":23},"action":"insert","lines":["l"]},{"start":{"row":475,"column":23},"end":{"row":475,"column":24},"action":"insert","lines":["l"]}],[{"start":{"row":475,"column":25},"end":{"row":475,"column":26},"action":"insert","lines":[","],"id":411}],[{"start":{"row":475,"column":26},"end":{"row":475,"column":27},"action":"insert","lines":[" "],"id":412}],[{"start":{"row":475,"column":27},"end":{"row":475,"column":29},"action":"insert","lines":["\"\""],"id":413}],[{"start":{"row":475,"column":28},"end":{"row":475,"column":29},"action":"insert","lines":["c"],"id":414},{"start":{"row":475,"column":29},"end":{"row":475,"column":30},"action":"insert","lines":["o"]},{"start":{"row":475,"column":30},"end":{"row":475,"column":31},"action":"insert","lines":["r"]},{"start":{"row":475,"column":31},"end":{"row":475,"column":32},"action":"insert","lines":["n"]}],[{"start":{"row":475,"column":28},"end":{"row":475,"column":32},"action":"remove","lines":["corn"],"id":415},{"start":{"row":475,"column":28},"end":{"row":475,"column":42},"action":"insert","lines":["cornflowerblue"]}],[{"start":{"row":475,"column":44},"end":{"row":476,"column":0},"action":"insert","lines":["",""],"id":416},{"start":{"row":476,"column":0},"end":{"row":476,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":476,"column":12},"end":{"row":477,"column":44},"action":"insert","lines":["tooltip.select(\"#tooltip-rain\")","            .style(\"fill\", \"cornflowerblue\")"],"id":417}],[{"start":{"row":476,"column":8},"end":{"row":476,"column":12},"action":"remove","lines":["    "],"id":418}],[{"start":{"row":476,"column":33},"end":{"row":476,"column":37},"action":"remove","lines":["rain"],"id":419},{"start":{"row":476,"column":33},"end":{"row":476,"column":34},"action":"insert","lines":["s"]},{"start":{"row":476,"column":34},"end":{"row":476,"column":35},"action":"insert","lines":["n"]},{"start":{"row":476,"column":35},"end":{"row":476,"column":36},"action":"insert","lines":["o"]},{"start":{"row":476,"column":36},"end":{"row":476,"column":37},"action":"insert","lines":["w"]}],[{"start":{"row":477,"column":28},"end":{"row":477,"column":42},"action":"remove","lines":["cornflowerblue"],"id":420},{"start":{"row":477,"column":28},"end":{"row":477,"column":35},"action":"insert","lines":["#8791a3"]}],[{"start":{"row":475,"column":20},"end":{"row":475,"column":24},"action":"remove","lines":["fill"],"id":421},{"start":{"row":475,"column":20},"end":{"row":475,"column":21},"action":"insert","lines":["c"]},{"start":{"row":475,"column":21},"end":{"row":475,"column":22},"action":"insert","lines":["o"]},{"start":{"row":475,"column":22},"end":{"row":475,"column":23},"action":"insert","lines":["l"]},{"start":{"row":475,"column":23},"end":{"row":475,"column":24},"action":"insert","lines":["o"]},{"start":{"row":475,"column":24},"end":{"row":475,"column":25},"action":"insert","lines":["r"]}],[{"start":{"row":477,"column":20},"end":{"row":477,"column":24},"action":"remove","lines":["fill"],"id":422},{"start":{"row":477,"column":20},"end":{"row":477,"column":21},"action":"insert","lines":["c"]},{"start":{"row":477,"column":21},"end":{"row":477,"column":22},"action":"insert","lines":["o"]},{"start":{"row":477,"column":22},"end":{"row":477,"column":23},"action":"insert","lines":["l"]},{"start":{"row":477,"column":23},"end":{"row":477,"column":24},"action":"insert","lines":["o"]},{"start":{"row":477,"column":24},"end":{"row":477,"column":25},"action":"insert","lines":["r"]}],[{"start":{"row":453,"column":4},"end":{"row":453,"column":8},"action":"remove","lines":["    "],"id":423},{"start":{"row":453,"column":0},"end":{"row":453,"column":4},"action":"remove","lines":["    "]},{"start":{"row":452,"column":8},"end":{"row":453,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":446,"column":14},"end":{"row":447,"column":0},"action":"insert","lines":["",""],"id":424},{"start":{"row":447,"column":0},"end":{"row":447,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":449,"column":4},"end":{"row":449,"column":8},"action":"remove","lines":["    "],"id":428},{"start":{"row":449,"column":0},"end":{"row":449,"column":4},"action":"remove","lines":["    "]},{"start":{"row":448,"column":9},"end":{"row":449,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":448,"column":9},"end":{"row":448,"column":10},"action":"insert","lines":[" "],"id":429}],[{"start":{"row":452,"column":8},"end":{"row":453,"column":0},"action":"insert","lines":["",""],"id":430},{"start":{"row":453,"column":0},"end":{"row":453,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":429,"column":0},"end":{"row":430,"column":0},"action":"insert","lines":["",""],"id":431}],[{"start":{"row":446,"column":10},"end":{"row":446,"column":12},"action":"insert","lines":["  "],"id":432}],[{"start":{"row":450,"column":37},"end":{"row":450,"column":41},"action":"remove","lines":["snow"],"id":433},{"start":{"row":450,"column":37},"end":{"row":450,"column":38},"action":"insert","lines":["r"]},{"start":{"row":450,"column":38},"end":{"row":450,"column":39},"action":"insert","lines":["a"]},{"start":{"row":450,"column":39},"end":{"row":450,"column":40},"action":"insert","lines":["i"]},{"start":{"row":450,"column":40},"end":{"row":450,"column":41},"action":"insert","lines":["n"]}],[{"start":{"row":439,"column":17},"end":{"row":439,"column":29},"action":"remove","lines":["text('none')"],"id":434},{"start":{"row":439,"column":17},"end":{"row":439,"column":18},"action":"insert","lines":["s"]},{"start":{"row":439,"column":18},"end":{"row":439,"column":19},"action":"insert","lines":["t"]},{"start":{"row":439,"column":19},"end":{"row":439,"column":20},"action":"insert","lines":["y"]},{"start":{"row":439,"column":20},"end":{"row":439,"column":21},"action":"insert","lines":["l"]},{"start":{"row":439,"column":21},"end":{"row":439,"column":22},"action":"insert","lines":["e"]}],[{"start":{"row":439,"column":22},"end":{"row":439,"column":24},"action":"insert","lines":["()"],"id":435}],[{"start":{"row":439,"column":23},"end":{"row":439,"column":25},"action":"insert","lines":["\"\""],"id":436}],[{"start":{"row":439,"column":24},"end":{"row":439,"column":25},"action":"insert","lines":["o"],"id":437},{"start":{"row":439,"column":25},"end":{"row":439,"column":26},"action":"insert","lines":["p"]},{"start":{"row":439,"column":26},"end":{"row":439,"column":27},"action":"insert","lines":["a"]},{"start":{"row":439,"column":27},"end":{"row":439,"column":28},"action":"insert","lines":["c"]}],[{"start":{"row":439,"column":24},"end":{"row":439,"column":28},"action":"remove","lines":["opac"],"id":438},{"start":{"row":439,"column":24},"end":{"row":439,"column":31},"action":"insert","lines":["opacity"]}],[{"start":{"row":439,"column":32},"end":{"row":439,"column":33},"action":"insert","lines":[","],"id":439}],[{"start":{"row":439,"column":33},"end":{"row":439,"column":34},"action":"insert","lines":[" "],"id":440}],[{"start":{"row":439,"column":34},"end":{"row":439,"column":36},"action":"insert","lines":["\"\""],"id":441}],[{"start":{"row":439,"column":35},"end":{"row":439,"column":36},"action":"insert","lines":["0"],"id":442}],[{"start":{"row":439,"column":36},"end":{"row":439,"column":37},"action":"remove","lines":["\""],"id":443}],[{"start":{"row":439,"column":34},"end":{"row":439,"column":35},"action":"remove","lines":["\""],"id":444}],[{"start":{"row":439,"column":17},"end":{"row":439,"column":22},"action":"remove","lines":["style"],"id":445},{"start":{"row":439,"column":17},"end":{"row":439,"column":18},"action":"insert","lines":["a"]},{"start":{"row":439,"column":18},"end":{"row":439,"column":19},"action":"insert","lines":["t"]},{"start":{"row":439,"column":19},"end":{"row":439,"column":20},"action":"insert","lines":["t"]},{"start":{"row":439,"column":20},"end":{"row":439,"column":21},"action":"insert","lines":["r"]}],[{"start":{"row":439,"column":17},"end":{"row":439,"column":35},"action":"remove","lines":["attr(\"opacity\", 0)"],"id":446},{"start":{"row":439,"column":17},"end":{"row":439,"column":18},"action":"insert","lines":["t"]},{"start":{"row":439,"column":18},"end":{"row":439,"column":19},"action":"insert","lines":["e"]},{"start":{"row":439,"column":19},"end":{"row":439,"column":20},"action":"insert","lines":["x"]},{"start":{"row":439,"column":20},"end":{"row":439,"column":21},"action":"insert","lines":["t"]}],[{"start":{"row":439,"column":17},"end":{"row":439,"column":21},"action":"remove","lines":["text"],"id":447},{"start":{"row":439,"column":17},"end":{"row":439,"column":23},"action":"insert","lines":["text()"]}],[{"start":{"row":439,"column":22},"end":{"row":439,"column":24},"action":"insert","lines":["''"],"id":448}],[{"start":{"row":439,"column":23},"end":{"row":439,"column":24},"action":"insert","lines":["n"],"id":449},{"start":{"row":439,"column":24},"end":{"row":439,"column":25},"action":"insert","lines":["o"]},{"start":{"row":439,"column":25},"end":{"row":439,"column":26},"action":"insert","lines":["n"]},{"start":{"row":439,"column":26},"end":{"row":439,"column":27},"action":"insert","lines":["e"]}],[{"start":{"row":347,"column":32},"end":{"row":347,"column":33},"action":"remove","lines":["4"],"id":450},{"start":{"row":347,"column":31},"end":{"row":347,"column":32},"action":"remove","lines":["2"]}],[{"start":{"row":347,"column":31},"end":{"row":347,"column":32},"action":"insert","lines":["3"],"id":451}],[{"start":{"row":293,"column":26},"end":{"row":293,"column":27},"action":"insert","lines":["6"],"id":452}],[{"start":{"row":326,"column":26},"end":{"row":326,"column":27},"action":"remove","lines":["5"],"id":455}],[{"start":{"row":336,"column":26},"end":{"row":336,"column":27},"action":"remove","lines":["5"],"id":456},{"start":{"row":336,"column":25},"end":{"row":336,"column":26},"action":"remove","lines":["3"]}],[{"start":{"row":336,"column":25},"end":{"row":336,"column":26},"action":"insert","lines":["4"],"id":457}],[{"start":{"row":336,"column":26},"end":{"row":336,"column":27},"action":"insert","lines":["4"],"id":458}],[{"start":{"row":336,"column":26},"end":{"row":336,"column":27},"action":"remove","lines":["4"],"id":459}],[{"start":{"row":336,"column":26},"end":{"row":336,"column":27},"action":"insert","lines":["5"],"id":460}],[{"start":{"row":326,"column":26},"end":{"row":326,"column":27},"action":"insert","lines":["2"],"id":461}],[{"start":{"row":336,"column":26},"end":{"row":336,"column":27},"action":"remove","lines":["5"],"id":462}],[{"start":{"row":336,"column":26},"end":{"row":336,"column":27},"action":"insert","lines":["7"],"id":463}],[{"start":{"row":326,"column":26},"end":{"row":326,"column":27},"action":"remove","lines":["2"],"id":464}],[{"start":{"row":326,"column":26},"end":{"row":326,"column":27},"action":"insert","lines":["4"],"id":465}],[{"start":{"row":352,"column":100},"end":{"row":352,"column":101},"action":"insert","lines":[" "],"id":466},{"start":{"row":352,"column":101},"end":{"row":352,"column":102},"action":"insert","lines":["("]},{"start":{"row":352,"column":102},"end":{"row":352,"column":103},"action":"insert","lines":["3"]},{"start":{"row":352,"column":103},"end":{"row":352,"column":104},"action":"insert","lines":["2"]}],[{"start":{"row":352,"column":104},"end":{"row":352,"column":109},"action":"insert","lines":["\\xB0F"],"id":467}],[{"start":{"row":352,"column":109},"end":{"row":352,"column":110},"action":"insert","lines":[")"],"id":468}],[{"start":{"row":348,"column":31},"end":{"row":348,"column":32},"action":"remove","lines":["2"],"id":469}],[{"start":{"row":348,"column":31},"end":{"row":348,"column":32},"action":"insert","lines":["1"],"id":470},{"start":{"row":348,"column":32},"end":{"row":348,"column":33},"action":"insert","lines":["5"]}],[{"start":{"row":348,"column":32},"end":{"row":348,"column":33},"action":"remove","lines":["5"],"id":471},{"start":{"row":348,"column":31},"end":{"row":348,"column":32},"action":"remove","lines":["1"]}],[{"start":{"row":348,"column":31},"end":{"row":348,"column":32},"action":"insert","lines":["1"],"id":472},{"start":{"row":348,"column":32},"end":{"row":348,"column":33},"action":"insert","lines":["9"]}],[{"start":{"row":348,"column":33},"end":{"row":348,"column":34},"action":"insert","lines":["5"],"id":473}],[{"start":{"row":349,"column":45},"end":{"row":349,"column":46},"action":"insert","lines":[" "],"id":474},{"start":{"row":349,"column":46},"end":{"row":349,"column":47},"action":"insert","lines":["+"]}],[{"start":{"row":349,"column":47},"end":{"row":349,"column":48},"action":"insert","lines":[" "],"id":475},{"start":{"row":349,"column":48},"end":{"row":349,"column":49},"action":"insert","lines":["."]},{"start":{"row":349,"column":49},"end":{"row":349,"column":50},"action":"insert","lines":["0"]},{"start":{"row":349,"column":50},"end":{"row":349,"column":51},"action":"insert","lines":["4"]}],[{"start":{"row":349,"column":32},"end":{"row":349,"column":33},"action":"remove","lines":["6"],"id":476}],[{"start":{"row":349,"column":32},"end":{"row":349,"column":33},"action":"insert","lines":["2"],"id":477}],[{"start":{"row":349,"column":32},"end":{"row":349,"column":33},"action":"remove","lines":["2"],"id":478}],[{"start":{"row":349,"column":32},"end":{"row":349,"column":33},"action":"insert","lines":["4"],"id":479}],[{"start":{"row":350,"column":32},"end":{"row":350,"column":33},"action":"remove","lines":["8"],"id":480}],[{"start":{"row":350,"column":32},"end":{"row":350,"column":33},"action":"insert","lines":["6"],"id":481}],[{"start":{"row":350,"column":45},"end":{"row":350,"column":50},"action":"insert","lines":["+ .04"],"id":482}],[{"start":{"row":350,"column":45},"end":{"row":350,"column":46},"action":"insert","lines":[" "],"id":483}],[{"start":{"row":350,"column":34},"end":{"row":350,"column":35},"action":"insert","lines":[" "],"id":484},{"start":{"row":350,"column":35},"end":{"row":350,"column":36},"action":"insert","lines":["0"]},{"start":{"row":350,"column":36},"end":{"row":350,"column":37},"action":"insert","lines":["5"]}],[{"start":{"row":350,"column":36},"end":{"row":350,"column":37},"action":"remove","lines":["5"],"id":485}],[{"start":{"row":350,"column":36},"end":{"row":350,"column":37},"action":"insert","lines":["."],"id":486},{"start":{"row":350,"column":37},"end":{"row":350,"column":38},"action":"insert","lines":["5"]},{"start":{"row":350,"column":38},"end":{"row":350,"column":39},"action":"insert","lines":[","]}],[{"start":{"row":350,"column":38},"end":{"row":350,"column":39},"action":"remove","lines":[","],"id":487},{"start":{"row":350,"column":37},"end":{"row":350,"column":38},"action":"remove","lines":["5"]},{"start":{"row":350,"column":36},"end":{"row":350,"column":37},"action":"remove","lines":["."]},{"start":{"row":350,"column":35},"end":{"row":350,"column":36},"action":"remove","lines":["0"]},{"start":{"row":350,"column":34},"end":{"row":350,"column":35},"action":"remove","lines":[" "]}],[{"start":{"row":347,"column":53},"end":{"row":347,"column":54},"action":"remove","lines":["4"],"id":488},{"start":{"row":347,"column":52},"end":{"row":347,"column":53},"action":"remove","lines":["0"]},{"start":{"row":347,"column":51},"end":{"row":347,"column":52},"action":"remove","lines":["."]},{"start":{"row":347,"column":50},"end":{"row":347,"column":51},"action":"remove","lines":[" "]},{"start":{"row":347,"column":49},"end":{"row":347,"column":50},"action":"remove","lines":["+"]}],[{"start":{"row":348,"column":48},"end":{"row":348,"column":49},"action":"remove","lines":["+"],"id":489}],[{"start":{"row":348,"column":51},"end":{"row":348,"column":52},"action":"remove","lines":["4"],"id":490},{"start":{"row":348,"column":50},"end":{"row":348,"column":51},"action":"remove","lines":["0"]},{"start":{"row":348,"column":49},"end":{"row":348,"column":50},"action":"remove","lines":["."]},{"start":{"row":348,"column":48},"end":{"row":348,"column":49},"action":"remove","lines":[" "]}],[{"start":{"row":349,"column":50},"end":{"row":349,"column":51},"action":"remove","lines":["4"],"id":491},{"start":{"row":349,"column":49},"end":{"row":349,"column":50},"action":"remove","lines":["0"]},{"start":{"row":349,"column":48},"end":{"row":349,"column":49},"action":"remove","lines":["."]},{"start":{"row":349,"column":47},"end":{"row":349,"column":48},"action":"remove","lines":[" "]},{"start":{"row":349,"column":46},"end":{"row":349,"column":47},"action":"remove","lines":["+"]}],[{"start":{"row":350,"column":50},"end":{"row":350,"column":51},"action":"remove","lines":["4"],"id":492},{"start":{"row":350,"column":49},"end":{"row":350,"column":50},"action":"remove","lines":["0"]},{"start":{"row":350,"column":48},"end":{"row":350,"column":49},"action":"remove","lines":["."]},{"start":{"row":350,"column":47},"end":{"row":350,"column":48},"action":"remove","lines":[" "]},{"start":{"row":350,"column":46},"end":{"row":350,"column":47},"action":"remove","lines":["+"]}],[{"start":{"row":0,"column":0},"end":{"row":493,"column":1},"action":"remove","lines":["/*global d3*/","//create a constructor function to process the data within object","","\"use strict\";","","const url = \"https://pro.openweathermap.org/data/2.5/forecast/climate?lat=40.781464&lon=-73.966696&units=imperial&appid=0353e66df6f1bec42f85ab2aa62ad775\"","","","function fetchSearchData() {","","    fetch(url)","        .then(res => res.json())","        // .then(data => {","        //     console.log(data)","        // .then(function(data) {","        //   document.getElementById(\"Output\").innerHTML =","        //     JSON.stringify(data);","        .then(function(data) {","            const dataset = data.list","","","            //   drawLineChart(dataset);","            drawChart(dataset)","","","        })","        .catch(error => {","            console.log(error);","        })","","","}","","","fetchSearchData()","","","","","","","function drawChart(newData) {","","    // 1. Access data","","","    console.log(newData)","    //add the date format to the data","    const formatDate = d3.timeFormat(\"%Y-%m-%d\")","    const parseDate = d3.timeParse(\"%Y-%m-%d\")","","    newData.forEach((element) => {","        element['date'] =","            (formatDate(element.dt * 1000))","    })","","    const sunFormatter = d3.timeFormat(\"%I %p\")","    const temperatureMinAccessor = d => d.temp.min","    const temperatureMaxAccessor = d => d.temp.max","    const dayAccessor = d => d.date","    const humidityAccessor = d => d.humidity","    const rainAccessor = d => d.rain","    const snowAccessor = d => d.snow","    const precipitationTypeAccessor = d => d.weather[0].main","    const weatherType = d => d.weather[0].description","    const cloudAccessor = d => d.clouds","    const dateParser = d3.timeParse(\"%Y-%m-%d\")","    const sunriseAccessor = d => dateParser(d.sunrise)","    const sunsetAccessor = d => dateParser(d.sunset)","    const sunriseFormat = d => sunFormatter(sunriseAccessor(d.sunrise))","    const dateAccessor = d => dateParser(d.date)","    console.log(sunriseFormat(newData[0]))","","","    // console.log(sunFormatter(sunriseAccessor([newData[0]])))","","","","","","    // 2. Create chart dimensions","","    const width = 600","    let dimensions = {","        width: width,","        height: width,","        radius: width / 2,","        margin: {","            top: 120,","            right: 120,","            bottom: 120,","            left: 120,","        },","    }","    dimensions.boundedWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right","    dimensions.boundedHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom","    dimensions.boundedRadius = dimensions.radius - ((dimensions.margin.left + dimensions.margin.right) / 2)","","    // 3. Draw canvas","","    const wrapper = d3.select(\"#wrapper\")","        .append(\"svg\")","        .attr(\"width\", dimensions.width)","        .attr(\"height\", dimensions.height)","","    const bounds = wrapper.append(\"g\")","        .style(\"transform\", `translate(${","      dimensions.margin.left + dimensions.boundedRadius}px, ${dimensions.margin.top + dimensions.boundedRadius}px)`)","","    const defs = wrapper.append(\"defs\")","","    const gradientId = \"temperature-gradient\"","    const gradient = defs.append(\"radialGradient\")","        .attr(\"id\", gradientId)","","    const radiusScale = d3.scaleLinear()","        .domain(d3.extent([","            ...newData.map(temperatureMinAccessor),","            ...newData.map(temperatureMaxAccessor),","        ]))","        .range([0, dimensions.boundedRadius])","        .nice()","","    const numberOfStops = 10","    const gradientColorScale = d3.interpolatePuBuGn","    // const gradientColorScale = d3.interpolateBuPu","    // const gradientColorScale = d3.interpolateCool","    // const gradientColorScale = d3.interpolateRdBu","","","    const temperatureColorScale = d3.scaleSequential()","        .domain(radiusScale.domain())","        .interpolator(gradientColorScale)","","    d3.range(numberOfStops).forEach(i =>","        gradient.append(\"stop\")","        .attr(\"offset\", `${i *100 / (numberOfStops - 1)}%`)","        .attr(\"stop-color\", gradientColorScale(","            i / (numberOfStops - 1)","        )))","","    // 4. Create scales","","    const angleScale = d3.scaleTime()","        .domain(d3.extent(newData, dateAccessor))","        .range([0, Math.PI * 2])","","","    const getCoordinatesForAngle = (angle, offset = 1) => [","        Math.cos(angle - Math.PI / 2) * dimensions.boundedRadius * offset,","        Math.sin(angle - Math.PI / 2) * dimensions.boundedRadius * offset,","    ]","","    const getXFromDataPoint = (d, offset = 1.4) => (","        getCoordinatesForAngle(angleScale(dateAccessor(d)), offset)[0]","    )","","    const getYFromDataPoint = (d, offset = 1.4) => (","        getCoordinatesForAngle(angleScale(dateAccessor(d)), offset)[1]","    )","","    // 5. Draw data","","    const freezingCircle = bounds.append(\"circle\")","        .attr(\"r\", radiusScale(32))","        .attr(\"class\", \"freezingCircle\")","","    const areaGenerator = d3.areaRadial()","        .angle(d => angleScale(dateAccessor(d)))","        .innerRadius(d => radiusScale(temperatureMinAccessor(d)))","        .outerRadius(d => radiusScale(temperatureMaxAccessor(d)))","","    const area = bounds.append(\"path\")","        .attr(\"d\", areaGenerator(newData))","        .style(\"fill\", `url(#${gradientId}`)","","    const cloudRadiusScale = d3.scaleSqrt()","        .domain(d3.extent(newData, cloudAccessor))","        .range([1, 10])","","    const humidityRadiusScale = d3.scaleSqrt()","        .domain(d3.extent(newData, humidityAccessor))","        .range([1, 10])","","    const precipitationTypes = [\"rain\", \"clouds\", \"snow\"]","    const precipitationTypeColorScale = d3.scaleOrdinal()","        .domain(precipitationTypes)","        .range([\"cornflowerblue\", \"#636e72\", \"#b2bec3\"])","","    const rainRaduisScale = d3.scaleSqrt()","        .domain(d3.extent(newData, rainAccessor))","        .range([0, 10])","","    const snowRaduisScale = d3.scaleSqrt()","        .domain(d3.extent(newData, snowAccessor))","        .range([0, 10])","","    // 6. Draw peripherals","","    const annotationGroup = bounds.append(\"g\")","    const drawAnnotation = (angle, offset, text) => {","        const [x1, y1] = getCoordinatesForAngle(angle, offset)","        const [x2, y2] = getCoordinatesForAngle(angle, 2.6)","","        annotationGroup.append(\"line\")","            .attr(\"x1\", x1)","            .attr(\"x2\", x2)","            .attr(\"y1\", y1)","            .attr(\"y2\", y2)","            .attr(\"class\", \"annotation-line\")","","        annotationGroup.append(\"text\")","            .attr(\"x\", x2 + 6)","            .attr(\"y\", y2)","            .attr(\"class\", \"annotation-text\")","            .text(text)","","    }","","","","","    const peripherals = bounds.append(\"g\")","    const days = d3.timeDay.range(...angleScale.domain())","","    days.forEach(day => {","        const angle = angleScale(day)","        const [x, y] = getCoordinatesForAngle(angle, 1)","        // console.log(getCoordinatesForAngle(angle, 1))","","        peripherals.append(\"line\")","            .attr(\"x2\", x)","            .attr(\"y2\", y)","            .attr(\"class\", \"grid-line\")","","","        const [labelx, labely] = getCoordinatesForAngle(angle, 2)","        peripherals.append(\"text\")","            .text(d3.timeFormat(\"%b %d\")(day))","            .attr(\"x\", labelx)","            .attr(\"y\", labely)","            .attr(\"class\", \"tick-label\")","            .style(\"text-anchor\",","                Math.abs(labelx) < 5 ? \"middle\" :","                labelx > 0 ? \"start\" :","                \"end\"","            )","","        const temperatureTicks = radiusScale.ticks(4)","        // console.log(temperatureTicks)","        const gridCircles = temperatureTicks.map(d => {","            peripherals.append(\"circle\")","                .attr(\"r\", radiusScale(d))","                .attr(\"class\", \"grid-line\")","        })","","        const tickLabelBackgrounds = temperatureTicks.map(d => {","            if (d < 1) return","            return peripherals.append(\"rect\")","                // .attr(\"x\", 4)","                .attr(\"y\", -radiusScale(d) - 10)","                .attr(\"width\", 40)","                .attr(\"height\", 20)","                .attr(\"fill\", \"#f8f9fa\")","        })","","        const gridLabels = temperatureTicks.map(d => {","            if (d < 1) return","            return peripherals.append(\"text\")","                .attr(\"x\", 4)","                .attr(\"y\", -radiusScale(d) + 2)","                .html(`${d3.format(\".0f\")(d)} \\xB0F`)","                .attr(\"class\", \"tick-label-temperature\")","        })","","    })","","    //ticks for days","","    const dayGroup = bounds.append(\"g\")","    const dayOffset = 1","    const dayTick = dayGroup.selectAll(\"line\")","        .data(newData.filter(d => dayAccessor(d)))","        .join(\"line\")","        .attr(\"x1\", d => getXFromDataPoint(d, dayOffset))","        .attr(\"y1\", d => getYFromDataPoint(d, dayOffset))","        .attr(\"x2\", d => getXFromDataPoint(d, dayOffset + 0.1))","        .attr(\"y2\", d => getYFromDataPoint(d, dayOffset + 0.1))","        .attr(\"class\", \"day-line\")","","    //outer circles","","    const cloudGroup = bounds.append(\"g\")","    const cloudOffset = 1.65","    const cloudDots = cloudGroup.selectAll(\"circle\")","        .data(newData)","        .join(\"circle\")","        .attr(\"r\", d => cloudRadiusScale(cloudAccessor(d)))","        .attr(\"cx\", d => getXFromDataPoint(d, cloudOffset))","        .attr(\"cy\", d => getYFromDataPoint(d, cloudOffset))","        .attr(\"class\", \"cloud-dot\")","","    const humidityGroup = bounds.append(\"g\")","    const humidityOffset = 1.20","    const humidityDots = humidityGroup.selectAll(\"circle\")","        .data(newData)","        .join(\"circle\")","        .attr(\"r\", d => humidityRadiusScale(humidityAccessor(d)))","        .attr(\"cx\", d => getXFromDataPoint(d, humidityOffset))","        .attr(\"cy\", d => getYFromDataPoint(d, humidityOffset))","        .attr(\"class\", \"humidity-dot\")","","","    // const precipitationGroup = bounds.append(\"g\")","    // const precipitationOffset = 1.35","    // const precipitationDots = precipitationGroup.selectAll(\"circle\")","    //     .data(newData)","    //     .join(\"circle\")","    //     .attr(\"r\", d => precipitationRaduisScale(precipitationProbabilityAccessor(d)))","    //     .attr(\"cx\", d => getXFromDataPoint(d, precipitationOffset))","    //     .attr(\"cy\", d => getYFromDataPoint(d, precipitationOffset))","    //     .style(\"fill\", d => precipitationTypeColorScale(","    //         precipitationTypeAccessor(d)))","    //     .attr(\"class\", \"precipitation-dot\")","","    const rainGroup = bounds.append(\"g\")","    const rainOffset = 1.34","    const rainDots = rainGroup.selectAll(\"circle\")","        .data(newData)","        .join(\"circle\")","        .attr(\"r\", d => rainRaduisScale(rainAccessor(d)))","        .attr(\"cx\", d => getXFromDataPoint(d, rainOffset))","        .attr(\"cy\", d => getYFromDataPoint(d, rainOffset))","        .attr(\"class\", \"rain-dot\")","","    const snowGroup = bounds.append(\"g\")","    const snowOffset = 1.47","    const snowDots = snowGroup.selectAll(\"circle\")","        .data(newData)","        .join(\"circle\")","        .attr(\"r\", d => snowRaduisScale(snowAccessor(d)))","        .attr(\"cx\", d => getXFromDataPoint(d, snowOffset))","        .attr(\"cy\", d => getYFromDataPoint(d, snowOffset))","        .attr(\"class\", \"snow-dot\")","","","","    drawAnnotation(Math.PI * 0.3, humidityOffset , \"Humidity\")","    drawAnnotation(Math.PI * 0.195, cloudOffset , \"Cloudiness\")","    drawAnnotation(Math.PI * 0.24, rainOffset , \"Rain\")","    drawAnnotation(Math.PI * 0.26, snowOffset , \"Snow\")","    drawAnnotation(Math.PI * 0.65, 0.5, \"Temperature\")","    drawAnnotation(Math.PI * 0.72, radiusScale(32) / dimensions.boundedRadius, \"Freezing Temperature (32\\xB0F)\")","","    //   // 7. Set up interactions","","    const listenerCircle = bounds.append(\"circle\")","        .attr(\"r\", dimensions.width / 2)","        .attr(\"class\", \"listener-circle\")","        .on(\"mousemove\", onMouseMove)","        .on(\"mouseleave\", onMouseLeave)","","","    const tooltip = d3.select(\"#tooltip\")","    const tooltipLine = bounds.append(\"path\")","        .attr(\"class\", \"tooltip-line\")","","    function onMouseMove(e) {","        const [x, y] = d3.pointer(e)","","        const getAngleFromCoordinates = (x, y) => (","            Math.atan2(y, x))","        let angle = getAngleFromCoordinates(x, y) + Math.PI / 2","        if (angle < 0) angle = (Math.PI * 2) + angle","","        const tooltipArcGenerator = d3.arc()","            .innerRadius(0)","            .outerRadius(dimensions.boundedRadius * 1.6)","            .startAngle(angle - 0.15)","            .endAngle(angle + 0.015)","","        tooltipLine.attr(\"d\", tooltipArcGenerator())","            .style(\"opacity\", 1)","","        const outerCoordinates = getCoordinatesForAngle(angle, 1.6)","","        tooltip.style(\"opacity\", 1)","            .style(\"transform\", `translate(calc(${","          outerCoordinates[0] < -50 ? \"40px + -100\" :","          outerCoordinates[0] > 50 ? \"-40px + 0\" :","          -50","        }% + ${","          outerCoordinates[0] + dimensions.margin.left + dimensions.boundedRadius","        }px), calc(${","          outerCoordinates[1] < -50 ? \"40px + -100\" :","          outerCoordinates[1] > 50 ? \"-40px + 0\" :","          -50","        }% + ${","          outerCoordinates[1] + dimensions.margin.top + dimensions.boundedRadius","        }px))`)","","        const date = angleScale.invert(angle)","        const dateString = d3.timeFormat(\"%Y-%m-%d\")(date)","","        const dataPoint = newData.find(d => d.date == dateString)","        if (!dataPoint) return","","        const noValue = NaN","","","","        tooltip.select(\"#tooltip-date\")","            .text(d3.timeFormat(\"%B %-d\")(date))","        tooltip.select(\"#tooltip-temperature-min\")","            .html(`${d3.format(\".1f\")(","          temperatureMinAccessor(dataPoint))","        }\t\\xB0F`)","        tooltip.select(\"#tooltip-temperature-max\")","            .html(`${d3.format(\".1f\")(","          temperatureMaxAccessor(dataPoint))","        }\t\\xB0F`)","        tooltip.select(\"#tooltip-humidity\")","            .html(`${d3.format(\".1f\")(","          humidityAccessor(dataPoint))","        }\t%`)","        tooltip.select(\"#tooltip-cloud\")","            .html(`${d3.format(\".1f\")(","          cloudAccessor(dataPoint))","        }\t%`)","","","        if (snowAccessor(dataPoint) != undefined) {","            tooltip.select(\"#tooltip-snow\")","                .html(`${d3.format(\".1f\")(","                snowAccessor(dataPoint))","        }\tmm`)","        }","        else {","            tooltip.select(\"#tooltip-snow\")","                .text('none')","        }","","","        if (rainAccessor(dataPoint) != undefined) {","            tooltip.select(\"#tooltip-rain\")","                .html(`${d3.format(\".1f\")(","            rainAccessor(dataPoint))","        }\tmm`)","        ","        } else {","            tooltip.select(\"#tooltip-rain\")","                .text('none')","        }","        ","        ","        tooltip.select(\"#tooltip-precipitation-type\")","            .text(weatherType(dataPoint))","        // tooltip.select(\"#tooltip-sunrise\")","        //     .text(sunriseAccessor(d3.timeFormat(\"%I %p\")))","        // tooltip.select(\"#tooltip-sunset\")","        //     .text(d3.timeFormat(\"%I %p\")(sunsetAccessor))","        tooltip.select(\".tooltip-precipitation-type\")","            .style(\"color\", precipitationTypeAccessor(dataPoint) ?","                precipitationTypeColorScale(","                    precipitationTypeAccessor(dataPoint)","                ) :","                \"#dadadd\")","        tooltip.select(\"#tooltip-temperature-min\")","            .style(\"color\", temperatureColorScale(","                temperatureMinAccessor(dataPoint)","            ))","        tooltip.select(\"#tooltip-temperature-max\")","            .style(\"color\", temperatureColorScale(","                temperatureMaxAccessor(dataPoint)","            ))","        tooltip.select(\"#tooltip-rain\")","            .style(\"color\", \"cornflowerblue\")","        tooltip.select(\"#tooltip-snow\")","            .style(\"color\", \"#8791a3\")","        // tooltip.select(\"#tooltip-sunrise\")","        //     .style(\"color\", \"#feca57\")","        // tooltip.select(\"#tooltip-sunset\")","        //     .style(\"color\", \"#fe7757\")","    }","","    function onMouseLeave() {","        tooltip.style(\"opacity\", 0)","        tooltipLine.style(\"opacity\", 0)","","    }","","","","}"],"id":493},{"start":{"row":0,"column":0},"end":{"row":499,"column":0},"action":"insert","lines":["/*global d3*/","//create a constructor function to process the data within object","","\"use strict\";","","const url = \"https://pro.openweathermap.org/data/2.5/forecast/climate?lat=40.781464&lon=-73.966696&units=imperial&appid=0353e66df6f1bec42f85ab2aa62ad775\"","","","function fetchSearchData() {","","    fetch(url)","        .then(res => res.json())","        // .then(data => {","        //     console.log(data)","        // .then(function(data) {","        //   document.getElementById(\"Output\").innerHTML =","        //     JSON.stringify(data);","        .then(function(data) {","            const dataset = data.list","","","            //   drawLineChart(dataset);","            drawChart(dataset)","","","        })","        .catch(error => {","            console.log(error);","        })","","","}","","","fetchSearchData()","","","","","","","function drawChart(newData) {","","    // 1. Access data","","","    console.log(newData)","    //add the date format to the data","    const formatDate = d3.timeFormat(\"%Y-%m-%d\")","    const parseDate = d3.timeParse(\"%Y-%m-%d\")","","    newData.forEach((element) => {","        element['date'] =","            (formatDate(element.dt * 1000))","    })","","    const sunFormatter = d3.timeFormat(\"%I %p\")","    const temperatureMinAccessor = d => d.temp.min","    const temperatureMaxAccessor = d => d.temp.max","    const dayAccessor = d => d.date","    const humidityAccessor = d => d.humidity","    const rainAccessor = d => d.rain","    const snowAccessor = d => d.snow","    const precipitationTypeAccessor = d => d.weather[0].main","    const weatherType = d => d.weather[0].description","    const cloudAccessor = d => d.clouds","    const dateParser = d3.timeParse(\"%Y-%m-%d\")","    const sunriseAccessor = d => dateParser(d.sunrise)","    const sunsetAccessor = d => dateParser(d.sunset)","    const sunriseFormat = d => sunFormatter(sunriseAccessor(d.sunrise))","    const dateAccessor = d => dateParser(d.date)","    console.log(sunriseFormat(newData[0]))","","","    // console.log(sunFormatter(sunriseAccessor([newData[0]])))","","","","","","    // 2. Create chart dimensions","","    const width = 600","    let dimensions = {","        width: width,","        height: width,","        radius: width / 2,","        margin: {","            top: 120,","            right: 120,","            bottom: 120,","            left: 120,","        },","    }","    dimensions.boundedWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right","    dimensions.boundedHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom","    dimensions.boundedRadius = dimensions.radius - ((dimensions.margin.left + dimensions.margin.right) / 2)","","    // 3. Draw canvas","","    const wrapper = d3.select(\"#wrapper\")","        .append(\"svg\")","        .attr(\"width\", dimensions.width)","        .attr(\"height\", dimensions.height)","","    const bounds = wrapper.append(\"g\")","        .style(\"transform\", `translate(${","      dimensions.margin.left + dimensions.boundedRadius}px, ${dimensions.margin.top + dimensions.boundedRadius}px)`)","","    const defs = wrapper.append(\"defs\")","","    const gradientId = \"temperature-gradient\"","    const gradient = defs.append(\"radialGradient\")","        .attr(\"id\", gradientId)","","    const radiusScale = d3.scaleLinear()","        .domain(d3.extent([","            ...newData.map(temperatureMinAccessor),","            ...newData.map(temperatureMaxAccessor),","        ]))","        .range([0, dimensions.boundedRadius])","        .nice()","","    const numberOfStops = 10","    const gradientColorScale = d3.interpolatePuBuGn","    // const gradientColorScale = d3.interpolateBuPu","    // const gradientColorScale = d3.interpolateCool","    // const gradientColorScale = d3.interpolateRdBu","","","    const temperatureColorScale = d3.scaleSequential()","        .domain(radiusScale.domain())","        .interpolator(gradientColorScale)","","    d3.range(numberOfStops).forEach(i =>","        gradient.append(\"stop\")","        .attr(\"offset\", `${i *100 / (numberOfStops - 1)}%`)","        .attr(\"stop-color\", gradientColorScale(","            i / (numberOfStops - 1)","        )))","","    // 4. Create scales","","    const angleScale = d3.scaleTime()","        .domain(d3.extent(newData, dateAccessor))","        .range([0, Math.PI * 2])","","","    const getCoordinatesForAngle = (angle, offset = 1) => [","        Math.cos(angle - Math.PI / 2) * dimensions.boundedRadius * offset,","        Math.sin(angle - Math.PI / 2) * dimensions.boundedRadius * offset,","    ]","","    const getXFromDataPoint = (d, offset = 1.4) => (","        getCoordinatesForAngle(angleScale(dateAccessor(d)), offset)[0]","    )","","    const getYFromDataPoint = (d, offset = 1.4) => (","        getCoordinatesForAngle(angleScale(dateAccessor(d)), offset)[1]","    )","","    // 5. Draw data","","    const freezingCircle = bounds.append(\"circle\")","        .attr(\"r\", radiusScale(32))","        .attr(\"class\", \"freezingCircle\")","","    const areaGenerator = d3.areaRadial()","        .angle(d => angleScale(dateAccessor(d)))","        .innerRadius(d => radiusScale(temperatureMinAccessor(d)))","        .outerRadius(d => radiusScale(temperatureMaxAccessor(d)))","","    const area = bounds.append(\"path\")","        .attr(\"d\", areaGenerator(newData))","        .style(\"fill\", `url(#${gradientId}`)","","    const cloudRadiusScale = d3.scaleSqrt()","        .domain(d3.extent(newData, cloudAccessor))","        .range([1, 10])","","    const humidityRadiusScale = d3.scaleSqrt()","        .domain(d3.extent(newData, humidityAccessor))","        .range([1, 10])","","    const precipitationTypes = [\"rain\", \"clouds\", \"snow\", \"humidity\"]","    const precipitationTypeColorScale = d3.scaleOrdinal()","        .domain(precipitationTypes)","        .range([\"cornflowerblue\", \"#636e72\", \"#b2bec3\", \"#d8d2e7\"])","","    const rainRaduisScale = d3.scaleSqrt()","        .domain(d3.extent(newData, rainAccessor))","        .range([0, 10])","","    const snowRaduisScale = d3.scaleSqrt()","        .domain(d3.extent(newData, snowAccessor))","        .range([0, 10])","","    // 6. Draw peripherals","","    const annotationGroup = bounds.append(\"g\")","    const drawAnnotation = (angle, offset, text) => {","        const [x1, y1] = getCoordinatesForAngle(angle, offset)","        const [x2, y2] = getCoordinatesForAngle(angle, 2.6)","","        annotationGroup.append(\"line\")","            .attr(\"x1\", x1)","            .attr(\"x2\", x2)","            .attr(\"y1\", y1)","            .attr(\"y2\", y2)","            .attr(\"class\", \"annotation-line\")","","        annotationGroup.append(\"text\")","            .attr(\"x\", x2 + 6)","            .attr(\"y\", y2)","            .attr(\"class\", \"annotation-text\")","            .text(text)","","    }","","","","","    const peripherals = bounds.append(\"g\")","    const days = d3.timeDay.range(...angleScale.domain())","","    days.forEach(day => {","        const angle = angleScale(day)","        const [x, y] = getCoordinatesForAngle(angle, 1)","        // console.log(getCoordinatesForAngle(angle, 1))","","        peripherals.append(\"line\")","            .attr(\"x2\", x)","            .attr(\"y2\", y)","            .attr(\"class\", \"grid-line\")","","","        const [labelx, labely] = getCoordinatesForAngle(angle, 2)","        peripherals.append(\"text\")","            .text(d3.timeFormat(\"%b %d\")(day))","            .attr(\"x\", labelx)","            .attr(\"y\", labely)","            .attr(\"class\", \"tick-label\")","            .style(\"text-anchor\",","                Math.abs(labelx) < 5 ? \"middle\" :","                labelx > 0 ? \"start\" :","                \"end\"","            )","","        const temperatureTicks = radiusScale.ticks(4)","        // console.log(temperatureTicks)","        const gridCircles = temperatureTicks.map(d => {","            peripherals.append(\"circle\")","                .attr(\"r\", radiusScale(d))","                .attr(\"class\", \"grid-line\")","        })","","        const tickLabelBackgrounds = temperatureTicks.map(d => {","            if (d < 1) return","            return peripherals.append(\"rect\")","                // .attr(\"x\", 4)","                .attr(\"y\", -radiusScale(d) - 10)","                .attr(\"width\", 40)","                .attr(\"height\", 20)","                .attr(\"fill\", \"#f8f9fa\")","        })","","        const gridLabels = temperatureTicks.map(d => {","            if (d < 1) return","            return peripherals.append(\"text\")","                .attr(\"x\", 4)","                .attr(\"y\", -radiusScale(d) + 2)","                .html(`${d3.format(\".0f\")(d)} \\xB0F`)","                .attr(\"class\", \"tick-label-temperature\")","        })","","    })","","    //ticks for days","","    const dayGroup = bounds.append(\"g\")","    const dayOffset = 1","    const dayTick = dayGroup.selectAll(\"line\")","        .data(newData.filter(d => dayAccessor(d)))","        .join(\"line\")","        .attr(\"x1\", d => getXFromDataPoint(d, dayOffset))","        .attr(\"y1\", d => getYFromDataPoint(d, dayOffset))","        .attr(\"x2\", d => getXFromDataPoint(d, dayOffset + 0.1))","        .attr(\"y2\", d => getYFromDataPoint(d, dayOffset + 0.1))","        .attr(\"class\", \"day-line\")","","    //outer circles","","    const cloudGroup = bounds.append(\"g\")","    const cloudOffset = 1.65","    const cloudDots = cloudGroup.selectAll(\"circle\")","        .data(newData)","        .join(\"circle\")","        .attr(\"r\", d => cloudRadiusScale(cloudAccessor(d)))","        .attr(\"cx\", d => getXFromDataPoint(d, cloudOffset))","        .attr(\"cy\", d => getYFromDataPoint(d, cloudOffset))","        .attr(\"class\", \"cloud-dot\")","","    const humidityGroup = bounds.append(\"g\")","    const humidityOffset = 1.20","    const humidityDots = humidityGroup.selectAll(\"circle\")","        .data(newData)","        .join(\"circle\")","        .attr(\"r\", d => humidityRadiusScale(humidityAccessor(d)))","        .attr(\"cx\", d => getXFromDataPoint(d, humidityOffset))","        .attr(\"cy\", d => getYFromDataPoint(d, humidityOffset))","        .attr(\"class\", \"humidity-dot\")","","    const rainGroup = bounds.append(\"g\")","    const rainOffset = 1.34","    const rainDots = rainGroup.selectAll(\"circle\")","        .data(newData)","        .join(\"circle\")","        .attr(\"r\", d => rainRaduisScale(rainAccessor(d)))","        .attr(\"cx\", d => getXFromDataPoint(d, rainOffset))","        .attr(\"cy\", d => getYFromDataPoint(d, rainOffset))","        .attr(\"class\", \"rain-dot\")","","    const snowGroup = bounds.append(\"g\")","    const snowOffset = 1.47","    const snowDots = snowGroup.selectAll(\"circle\")","        .data(newData)","        .join(\"circle\")","        .attr(\"r\", d => snowRaduisScale(snowAccessor(d)))","        .attr(\"cx\", d => getXFromDataPoint(d, snowOffset))","        .attr(\"cy\", d => getYFromDataPoint(d, snowOffset))","        .attr(\"class\", \"snow-dot\")","","","","    // drawAnnotation(Math.PI * 0.3, humidityOffset , \"Humidity\")","    // drawAnnotation(Math.PI * 0.195, cloudOffset , \"Cloudiness\")","    // drawAnnotation(Math.PI * 0.24, rainOffset , \"Rain\")","    // drawAnnotation(Math.PI * 0.26, snowOffset , \"Snow\")","    drawAnnotation(Math.PI * 0.65, 0.5, \"Temperature\")","    drawAnnotation(Math.PI * 0.72, radiusScale(32) / dimensions.boundedRadius, \"Freezing Temperature (32\\xB0F)\")","    ","     precipitationTypes.forEach((precipitationType, index) => {","    const labelCoordinates = getCoordinatesForAngle(Math.PI * 0.28, 3.0)","","    annotationGroup.append(\"circle\")","      .attr(\"cx\", labelCoordinates[0] + 15)","      .attr(\"cy\", labelCoordinates[1] + (16 * (index + 1)))","      .attr(\"r\", 4)","      .attr(\"fill\", precipitationTypeColorScale(precipitationType))","      .style(\"opacity\", 0.7)","    annotationGroup.append(\"text\")","      .attr(\"x\", labelCoordinates[0] + 25)","      .attr(\"y\", labelCoordinates[1] + (16 * (index + 1)))","      .text(precipitationType)","      .attr(\"class\", \"annotation-text\")","","  })","","","    //   // 7. Set up interactions","","    const listenerCircle = bounds.append(\"circle\")","        .attr(\"r\", dimensions.width / 2)","        .attr(\"class\", \"listener-circle\")","        .on(\"mousemove\", onMouseMove)","        .on(\"mouseleave\", onMouseLeave)","","","    const tooltip = d3.select(\"#tooltip\")","    const tooltipLine = bounds.append(\"path\")","        .attr(\"class\", \"tooltip-line\")","","    function onMouseMove(e) {","        const [x, y] = d3.pointer(e)","","        const getAngleFromCoordinates = (x, y) => (","            Math.atan2(y, x))","        let angle = getAngleFromCoordinates(x, y) + Math.PI / 2","        if (angle < 0) angle = (Math.PI * 2) + angle","","        const tooltipArcGenerator = d3.arc()","            .innerRadius(0)","            .outerRadius(dimensions.boundedRadius * 1.6)","            .startAngle(angle - 0.15)","            .endAngle(angle + 0.015)","","        tooltipLine.attr(\"d\", tooltipArcGenerator())","            .style(\"opacity\", 1)","","        const outerCoordinates = getCoordinatesForAngle(angle, 1.6)","","        tooltip.style(\"opacity\", 1)","            .style(\"transform\", `translate(calc(${","          outerCoordinates[0] < -50 ? \"40px + -100\" :","          outerCoordinates[0] > 50 ? \"-40px + 0\" :","          -50","        }% + ${","          outerCoordinates[0] + dimensions.margin.left + dimensions.boundedRadius","        }px), calc(${","          outerCoordinates[1] < -50 ? \"40px + -100\" :","          outerCoordinates[1] > 50 ? \"-40px + 0\" :","          -50","        }% + ${","          outerCoordinates[1] + dimensions.margin.top + dimensions.boundedRadius","        }px))`)","","        const date = angleScale.invert(angle)","        const dateString = d3.timeFormat(\"%Y-%m-%d\")(date)","","        const dataPoint = newData.find(d => d.date == dateString)","        if (!dataPoint) return","","        const noValue = NaN","","","","        tooltip.select(\"#tooltip-date\")","            .text(d3.timeFormat(\"%B %-d\")(date))","        tooltip.select(\"#tooltip-temperature-min\")","            .html(`${d3.format(\".1f\")(","          temperatureMinAccessor(dataPoint))","        }\t\\xB0F`)","        tooltip.select(\"#tooltip-temperature-max\")","            .html(`${d3.format(\".1f\")(","          temperatureMaxAccessor(dataPoint))","        }\t\\xB0F`)","        tooltip.select(\"#tooltip-humidity\")","            .html(`${d3.format(\".1f\")(","          humidityAccessor(dataPoint))","        }\t%`)","        tooltip.select(\"#tooltip-cloud\")","            .html(`${d3.format(\".1f\")(","          cloudAccessor(dataPoint))","        }\t%`)","","","        if (snowAccessor(dataPoint) != undefined) {","            tooltip.select(\"#tooltip-snow\")","                .html(`${d3.format(\".1f\")(","                snowAccessor(dataPoint))","        }\tmm`)","        }","        else {","            tooltip.select(\"#tooltip-snow\")","                .text('none')","        }","","","        if (rainAccessor(dataPoint) != undefined) {","            tooltip.select(\"#tooltip-rain\")","                .html(`${d3.format(\".1f\")(","            rainAccessor(dataPoint))","        }\tmm`)","        ","        } else {","            tooltip.select(\"#tooltip-rain\")","                .text('none')","        }","        ","        ","        tooltip.select(\"#tooltip-precipitation-type\")","            .text(weatherType(dataPoint))","        // tooltip.select(\"#tooltip-sunrise\")","        //     .text(sunriseAccessor(d3.timeFormat(\"%I %p\")))","        // tooltip.select(\"#tooltip-sunset\")","        //     .text(d3.timeFormat(\"%I %p\")(sunsetAccessor))","        tooltip.select(\".tooltip-precipitation-type\")","            .style(\"color\", precipitationTypeAccessor(dataPoint) ?","                precipitationTypeColorScale(","                    precipitationTypeAccessor(dataPoint)","                ) :","                \"#dadadd\")","        tooltip.select(\"#tooltip-temperature-min\")","            .style(\"color\", temperatureColorScale(","                temperatureMinAccessor(dataPoint)","            ))","        tooltip.select(\"#tooltip-temperature-max\")","            .style(\"color\", temperatureColorScale(","                temperatureMaxAccessor(dataPoint)","            ))","        tooltip.select(\"#tooltip-rain\")","            .style(\"color\", \"cornflowerblue\")","        tooltip.select(\"#tooltip-snow\")","            .style(\"color\", \"#8791a3\")","        // tooltip.select(\"#tooltip-sunrise\")","        //     .style(\"color\", \"#feca57\")","        // tooltip.select(\"#tooltip-sunset\")","        //     .style(\"color\", \"#fe7757\")","    }","","    function onMouseLeave() {","        tooltip.style(\"opacity\", 0)","        tooltipLine.style(\"opacity\", 0)","","    }","","","","}",""]}],[{"start":{"row":37,"column":0},"end":{"row":38,"column":0},"action":"remove","lines":["",""],"id":494},{"start":{"row":36,"column":0},"end":{"row":37,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":75,"column":0},"end":{"row":76,"column":0},"action":"remove","lines":["",""],"id":495}],[{"start":{"row":73,"column":0},"end":{"row":74,"column":0},"action":"remove","lines":["",""],"id":496},{"start":{"row":72,"column":63},"end":{"row":73,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":241,"column":13},"end":{"row":242,"column":0},"action":"insert","lines":["",""],"id":497},{"start":{"row":242,"column":0},"end":{"row":242,"column":12},"action":"insert","lines":["            "]}]]},"ace":{"folds":[],"scrolltop":4348,"scrollleft":0,"selection":{"start":{"row":242,"column":12},"end":{"row":242,"column":12},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":227,"state":"no_regex","mode":"ace/mode/javascript"}},"timestamp":1648424740235,"hash":"264c92adbeadfc20b041dcf3f1b442d4dbde694d"}